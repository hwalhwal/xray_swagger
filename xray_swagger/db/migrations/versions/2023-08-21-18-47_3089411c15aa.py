"""Filling fixture

Revision ID: 3089411c15aa
Revises: 633298a57b8a
Create Date: 2023-08-21 18:47:02.613344

"""
import sqlalchemy as sa
from alembic import op

from datetime import datetime


from xray_swagger.db.models.settings import SettingsGlobal, SettingsProductParameter
from xray_swagger.db.models.user import User, AuthLevel
from xray_swagger.db.models.peripherals import Device

from xray_settings.routers.emitter import WatchDogTimerEnable, XrayEmitterVoltage, XrayEmitterCurrent
from xray_settings.routers.conveyor import ConveyorDirection, ConveyorVelocity
from xray_settings.routers.inspections import InspectionMode, InspectionMethod, InspectionItemMultiselect
from xray_settings.routers.contaminant.ai import AISettingContaminantDetection
from xray_settings.routers.contaminant.rule import RuleDetectSettingTemplate
from xray_settings.routers.rejector import RejectorDelayMS, RejectorOpenMS
from xray_settings.routers.image import ImageGenerationSettings, ImageStoringOptionMultiselect, InspectionImagePreviewPostprocessing
from xray_settings.routers.preprocessor import PreprocessorCascadingFunctionSet
from xray_settings.routers.contour import ContourDetectionSetting


# revision identifiers, used by Alembic.
revision = "3089411c15aa"
down_revision = "633298a57b8a"
branch_labels = None
depends_on = None

conn = op.get_bind()
meta = sa.MetaData()
meta.reflect(bind=conn)

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    print(f"{User.__table__} bulk insert")
    op.bulk_insert(
        sa.Table(User.__table__, meta, autoload_with=conn),
        [
            {
                "id": 1,
                "username": "engineer",
                "password": "88946",
                "fullname": "Gobang Kim",
                "phone_number": "+82106621-4454",
                "company": "Soluray",
                "job_title": "Tech Lead",
                "joined_at": datetime.utcnow(),
                "authlevel": AuthLevel.ENGINEER.name,
            },
            {
                "id": 2,
                "username": "admin",
                "password": "1234",
                "fullname": "DaMent",
                "phone_number": "80121-4454",
                "company": "Necrophilia",
                "job_title": "demand",
                "joined_at": datetime.utcnow(),
                "authlevel": AuthLevel.SUPERVISOR.name,
            },
        ],
        multiinsert=False
    )
    print(f"{SettingsGlobal.__table__} bulk insert")
    op.bulk_insert(
        sa.Table(SettingsGlobal.__table__, meta, autoload_with=conn),
        [
            {
                "setting_param_name": "Watchdog.Timer",
                "creator_id": 1,
                "last_editor_id": 1,
                "authlevel": AuthLevel.ENGINEER.name,
                "json_schema": WatchDogTimerEnable.model_json_schema(),
                "value": True,
            },
            {
                "setting_param_name": "Conveyor.Direction",
                "creator_id": 1,
                "last_editor_id": 1,
                "authlevel": AuthLevel.ENGINEER.name,
                "json_schema": ConveyorDirection.model_json_schema(),
                "value": 1,
            },
            {
                "setting_param_name": "Inspection.Mode",
                "creator_id": 1,
                "last_editor_id": 1,
                "authlevel": AuthLevel.SUPERVISOR.name,
                "json_schema": InspectionMode.model_json_schema(),
                "value": 1,
            },
        ]
    )
    print(f"{Device.__table__} bulk insert")
    op.bulk_insert(
        sa.Table(Device.__table__, meta, autoload_with=conn),
        [
            {
                "name": "Detector",
                "model_series": "X-scan 0.4C5-410-USB",
                "code": "XD410",
                "manufacturer": "Detection Technology",
                "specifications": {"wow": 0},
            },
            {
                "name": "Detector",
                "model_series": "X-scan 0.4C5-614-USB",
                "code": "XD614",
                "manufacturer": "Detection Technology",
                "specifications": {"wow": 0},
            },
            {
                "name": "Emitter",
                "model_series": "XRB80P&N100X5708 / 100W",
                "code": "XE5708W100",
                "manufacturer": "Spellman High Voltage",
                "specifications": None,
            },
            {
                "name": "Emitter",
                "model_series": "XRB80P&N200X3921 / 200W",
                "code": "XE3921W200",
                "manufacturer": "Spellman High Voltage",
                "specifications": None,
            },
            {
                "name": "Emitter",
                "model_series": "XRB160P&N480X4301 / 480W",
                "code": "XE4301W480",
                "manufacturer": "Spellman High Voltage",
                "specifications": None,
            },
        ]
    )
    print(f"{SettingsProductParameter.__table__} bulk insert")
    op.bulk_insert(
        sa.Table(SettingsProductParameter.__table__, meta, autoload_with=conn),
        [
            {
                "setting_param_name": "XrayEmitter.Voltage",
                "authlevel": AuthLevel.SUPERVISOR.name,
                "setting_template": XrayEmitterVoltage.model_json_schema(),
            },
            {
                "setting_param_name": "XrayEmitter.Current",
                "authlevel": AuthLevel.SUPERVISOR.name,
                "setting_template": XrayEmitterCurrent.model_json_schema(),
            },
            {
                "setting_param_name": "Conveyor.Velocity",
                "authlevel": AuthLevel.SUPERVISOR.name,
                "setting_template": ConveyorVelocity.model_json_schema(),
            },
            {
                "setting_param_name": "Rejector.DelayMS",
                "authlevel": AuthLevel.SUPERVISOR.name,
                "setting_template": RejectorDelayMS.model_json_schema(),
            },
            {
                "setting_param_name": "Rejector.OpenMS",
                "authlevel": AuthLevel.SUPERVISOR.name,
                "setting_template": RejectorOpenMS.model_json_schema(),
            },
            {
                "setting_param_name": "Inspection.Method",
                "authlevel": AuthLevel.SUPERVISOR.name,
                "setting_template": InspectionMethod.model_json_schema(),
            },
            {
                "setting_param_name": "Inspection.Item",
                "authlevel": AuthLevel.SUPERVISOR.name,
                "setting_template": InspectionItemMultiselect.model_json_schema(),
            },
            {
                "setting_param_name": "Inspection.Contaminant.AI",
                "authlevel": AuthLevel.SUPERVISOR.name,
                "setting_template": AISettingContaminantDetection.model_json_schema(),
            },
            {
                "setting_param_name": "Inspection.Contaminant.RuleBased",
                "authlevel": AuthLevel.SUPERVISOR.name,
                "setting_template": RuleDetectSettingTemplate.model_json_schema(),
            },
            {
                "setting_param_name": "Image.GenerationSettings",
                "authlevel": AuthLevel.SUPERVISOR.name,
                "setting_template": ImageGenerationSettings.model_json_schema(),
            },
            {
                "setting_param_name": "Image.StoringOption",
                "authlevel": AuthLevel.SUPERVISOR.name,
                "setting_template": ImageStoringOptionMultiselect.model_json_schema(),
            },
            {
                "setting_param_name": "Image.InspectionPreviewPostprocessing",
                "authlevel": AuthLevel.SUPERVISOR.name,
                "setting_template": InspectionImagePreviewPostprocessing.model_json_schema(),
            },
            {
                "setting_param_name": "Preprocessor.Cascading",
                "authlevel": AuthLevel.SUPERVISOR.name,
                "setting_template": PreprocessorCascadingFunctionSet.model_json_schema(),
            },
            {
                "setting_param_name": "Contour",
                "authlevel": AuthLevel.SUPERVISOR.name,
                "setting_template": ContourDetectionSetting.model_json_schema(),
            },
        ]
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    print("Downgrade Start")
    queries = (
        sa.text(f'TRUNCATE TABLE "{User.__tablename__}" CASCADE;'),
        sa.text(f'TRUNCATE TABLE "{SettingsGlobal.__tablename__}" CASCADE;'),
        sa.text(f'TRUNCATE TABLE "{Device.__tablename__}" CASCADE;'),
        sa.text(f'TRUNCATE TABLE "{SettingsProductParameter.__tablename__}" CASCADE;'),
    )
    for q in queries:
        print(q)
        op.execute(q)

    print("Downgrade Done")
    # ### end Alembic commands ###
